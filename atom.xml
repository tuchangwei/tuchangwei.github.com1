<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Vale's Blog]]></title>
  <link href="http://tuchangwei.github.io/atom.xml" rel="self"/>
  <link href="http://tuchangwei.github.io/"/>
  <updated>2013-09-09T08:55:53+08:00</updated>
  <id>http://tuchangwei.github.io/</id>
  <author>
    <name><![CDATA[Vale T.]]></name>
    <email><![CDATA[tcwliphone@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sep 1-7,2013 All Activities]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/09/09/sep1-7/"/>
    <updated>2013-09-09T08:49:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/09/09/sep1-7</id>
    <content type="html"><![CDATA[<!-- configurable section -->


<script type="text/javascript">
if (typeof rtapi == 'undefined') var rtapi = {}; rtapi.keSu = {};
rtapi.keSu.title = 'All Activities ';
rtapi.keSu.kind = 'sidebar';
rtapi.keSu.styling = { width:300, height:300 };
</script>


<!-- below is required -->


<div id="rtdivkeSu"><p id="rtmsg">RescueTime: <a href="http://www.rescuetime.com/tour"> Project Time Tracking Software</a> 
&amp; Team <a href="http://www.rescuetime.com">Time Management Software</a></p></div>


<script src="https://www.rescuetime.com/anapi/js/embed/B63eSu_COao2zbuL22YAGJtRGAfydngMlhTrcaIY" type="text/javascript"></script>


<script type='text/javascript'>RTAPI.render_all(rtapi);</script>


<!-- a little how-to 
- Paste this into your web page where you want the chart.
- You may have multiple embedded charts on the same page.
- You can change the title, width and height by editing the named properties.
- You can opt for the more verbose full chart by setting .kind to 'default'.
- If you want your own css control, you can add 'rtapi.my_css = true;' before the render function.
- css class names are: 
-   rtdiv : the whole container
-   rttitle : the title, rtchart : the chart, rtfeed : the footer
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to export mp3 from ipod-library]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/06/04/how-to-export-mp3-from-ipod-library/"/>
    <updated>2013-06-04T22:33:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/06/04/how-to-export-mp3-from-ipod-library</id>
    <content type="html"><![CDATA[<p>Someday, our leader let me export videos, music and photos from Video, Music and Photos in iPad or iPhone. After looked up some articles, I found it was difficult to export mp3.</p>

<p>But, Nowadays, it came true to export mp3, so every format of ipod-library files can be exported.</p>

<p>Now, See how to do it.</p>

<ul>
<li>first, import some frameworks, such as <code>MobileCoreServices.framework</code>,<code>MediaPlayer.framework</code>,<code>AVFoundation.framework</code></li>
<li><p>second, query the media from ipod-library.</p>

<pre><code>  //request videos and music come from system's Videos and Music 
  NSNumber *videoTypeNum = [NSNumber numberWithInteger:MPMediaTypeAny];

  MPMediaPropertyPredicate *videoPredicate = [MPMediaPropertyPredicate predicateWithValue:videoTypeNum forProperty:MPMediaItemPropertyMediaType];

  MPMediaQuery *videoQuery = [[MPMediaQuery alloc] init];
  [videoQuery addFilterPredicate: videoPredicate];
  _mediaItems = [[videoQuery items] copy];
</code></pre></li>
</ul>


<p>*third, convert MPMediaItem to AVURLAsset, generate file name and file extension, then start export,the format of exported file is &ldquo;MOV&rdquo;.Finally, i need use NSFileManager rename the mov to mp3.</p>

<pre><code> MPMediaItem *mediaItem = [_mediaItems objectAtIndex:_count];

 //get the name of the file.
 NSString *songTitle = [mediaItem valueForProperty: MPMediaItemPropertyTitle];

 //convert MPMediaItem to AVURLAsset.
 AVURLAsset *sset = [AVURLAsset assetWithURL:[mediaItem valueForProperty:MPMediaItemPropertyAssetURL]];

//get the extension of the file.
NSString *fileType = [[[[sset.URL absoluteString] componentsSeparatedByString:@"?"] objectAtIndex:0] pathExtension];

//init export, here you must set "presentName" argument to "AVAssetExportPresetPassthrough". If not, you will can't export mp3 correct.
AVAssetExportSession *export = [[AVAssetExportSession alloc] initWithAsset:sset presetName:AVAssetExportPresetPassthrough];

NSLog(@"export.supportedFileTypes : %@",export.supportedFileTypes);
//export to mov format.
export.outputFileType = @"com.apple.quicktime-movie";

export.shouldOptimizeForNetworkUse = YES;

NSString *extension = ( NSString *)UTTypeCopyPreferredTagWithClass(( CFStringRef)export.outputFileType, kUTTagClassFilenameExtension);

NSLog(@"extension %@",extension);
NSString *path = [NSHomeDirectory() stringByAppendingFormat:@"/Documents/%@.%@",songTitle,extension];

NSURL *outputURL = [NSURL fileURLWithPath:path];
export.outputURL = outputURL;
[export exportAsynchronouslyWithCompletionHandler:^{

   if (export.status == AVAssetExportSessionStatusCompleted)
     {
        //then rename mov format to the original format.
         NSFileManager *manage = [NSFileManager defaultManager];

         NSString *mp3Path = [NSHomeDirectory() stringByAppendingFormat:@"/Documents/%@.%@",songTitle,fileType];

         NSError *error = nil;

         [manage moveItemAtPath:path toPath:mp3Path error:&amp;error];

         NSLog(@"error %@",error);

      }
      else
      {
         NSLog(@"%@",export.error);
      }

}];
</code></pre>

<p>Some points you need notice:</p>

<ul>
<li>when you init AVAssetExportSession object, the &ldquo;presetName&rdquo; argument must be &ldquo;AVAssetExportPresetPassthrough&rdquo;.</li>
<li>The &ldquo;outputFileType&rdquo; may be &ldquo;com.apple.quicktime-movie&rdquo;.</li>
</ul>


<p>So easy, doesn&rsquo;t it? Good night.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The replacement of the semaphore]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/05/24/the-replacement-of-the-semaphore/"/>
    <updated>2013-05-24T22:49:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/05/24/the-replacement-of-the-semaphore</id>
    <content type="html"><![CDATA[<p>In order to synchronize between threads, i used semaphore in <a href="http://tuchangwei.github.io/blog/2013/03/05/gcdhe-xin-hao-liang/">here</a>. Today, I find a replacement of the semaphore. I think it is more efficient and cool. Now, i note it as follow:</p>

<pre><code>    - (id)initWithLibraryChangedHandler:(void (^)(void))libraryChangedHandler
{
    self = [super init];
    if (self) 
    {
        _assetItems = [NSMutableArray array];
        //Creates a new dispatch queue to which blocks can be submitted.  创建一个新的分发队列用于提交blocks
        _assetItemsQueue = dispatch_queue_create("com.apple.avmovieexporter.assetItemLibraryQueue", DISPATCH_QUEUE_SERIAL);

        _libraryGroup = dispatch_group_create();
        //Returns a well-known global concurrent queue of a given priority level.
        //The well-known global concurrent queues cannot be modified
        //Blocks submitted to these global concurrent queues may be executed concurrently with respect to each other.
        _libraryQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0);

        // Update the table view whenever the library changes
        [[NSNotificationCenter defaultCenter] addObserverForName:ALAssetsLibraryChangedNotification 
                                                          object:nil 
                                                           queue:[NSOperationQueue mainQueue] 
                                                      usingBlock:^(NSNotification *block){
                                                               libraryChangedHandler();
                                                           }];
    }

    return self;
}

- (void)dealloc
{
    dispatch_release(_assetItemsQueue);

    dispatch_release(_libraryQueue);
    dispatch_release(_libraryGroup);

    [[NSNotificationCenter defaultCenter] removeObserver:self name:ALAssetsLibraryChangedNotification object:nil];
}

- (void)loadLibraryWithCompletionBlock:(void (^)(void))completionHandler
{
    // Load content using the Media Library and AssetLibrary APIs, also check for content included in the application bundle
    [self.assetItems removeAllObjects];

    [self buildMediaLibrary];
    [self buildAssetLibrary];
    [self buildApplicationBundleLibrary];


    //Schedules a block object to be submitted to a queue when a group of previously submitted block objects have completed.
    dispatch_group_notify(self.libraryGroup, self.libraryQueue, ^{
        dispatch_async(dispatch_get_main_queue(), ^{
            completionHandler();
        });
    });
}

- (void)addURL:(NSURL *)url
{
    __unsafe_unretained __block VideoLibrary *weakSelf = (VideoLibrary *)self;

    if (url == nil)
        return;

    dispatch_async(self.assetItemsQueue, ^{
        [weakSelf.assetItems addObject:[[AssetItem alloc] initWithURL:url]];
    });
}

#pragma mark - iPod Library

- (void)buildMediaLibrary
{
    __unsafe_unretained __block VideoLibrary *weakSelf = (VideoLibrary *)self;

    //将blocks绑定到libraryGroup，然后放在libraryQueue并发队列中
    dispatch_group_async(self.libraryGroup, self.libraryQueue, ^{
        NSLog(@"started building media library...");

        // Search for video content in the Media Library
#if  __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 50000
        NSNumber *videoTypeNum = [NSNumber numberWithInteger:MPMediaTypeAnyVideo];
#else
        NSNumber *videoTypeNum = [NSNumber numberWithInteger:(MPMediaTypeAny ^ MPMediaTypeAnyAudio)];
#endif
        MPMediaPropertyPredicate *videoPredicate = [MPMediaPropertyPredicate predicateWithValue:videoTypeNum forProperty:MPMediaItemPropertyMediaType];
        MPMediaQuery *videoQuery = [[MPMediaQuery alloc] init];
        [videoQuery addFilterPredicate: videoPredicate];
        NSArray *items = [videoQuery items];

        for (MPMediaItem *mediaItem in items) 
            [weakSelf addURL:[mediaItem valueForProperty:MPMediaItemPropertyAssetURL]];

        NSLog(@"done building media library...");
    });
}

- (void)buildAssetLibrary
{
    NSLog(@"started building asset library...");

    __unsafe_unretained __block VideoLibrary *weakSelf = (VideoLibrary *)self;
    dispatch_group_enter(weakSelf.libraryGroup);

    ALAssetsLibrary *assetLibrary = [[ALAssetsLibrary alloc] init];

    // Enumerate through all the groups in the Asset Library
    [assetLibrary enumerateGroupsWithTypes:ALAssetsGroupAll 
                                usingBlock:
     ^(ALAssetsGroup *group, BOOL *stop)
     {
         if (group != nil)
         {
             // Filter by groups that contain video
             [group setAssetsFilter:[ALAssetsFilter allVideos]];
             [group enumerateAssetsUsingBlock:
              ^(ALAsset *asset, NSUInteger index, BOOL *stop)
              {
                  if (asset)
                      [weakSelf addURL:[[asset defaultRepresentation] url]];
              }];
         }
         else
         {
             dispatch_group_leave(weakSelf.libraryGroup);
             NSLog(@"done building asset library...");
         }
     }
                              failureBlock:^(NSError *error)
     {
         dispatch_group_leave(weakSelf.libraryGroup);
         NSLog(@"error enumerating AssetLibrary groups %@\n", error);
     }];

}
</code></pre>

<p>The above is used for understanding the whole plot, now you can see the detail:</p>

<pre><code>dispatch_group_notify(self.libraryGroup, self.libraryQueue, ^{
        dispatch_async(dispatch_get_main_queue(), ^{
            completionHandler();
        });
    });
}
</code></pre>

<p>The explain of the <a href="https://developer.apple.com/library/ios/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html">document</a> for the selector is that &ldquo;Schedules a block object to be submitted to a queue when a group of previously submitted block objects have completed.&rdquo; So, we can wait the tasks to complete, then to do something we want. The <code>dispatch_group_enter</code> is cool as well. it can let the block enter the queue and execute as a task associated group.</p>

<p>So, that is all. See you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Localize strings using some utilities]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/04/20/localize-string-and-some-utilities/"/>
    <updated>2013-04-20T22:07:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/04/20/localize-string-and-some-utilities</id>
    <content type="html"><![CDATA[<p>When release applications, one thing will not be avoided, it is localizing. According to the different user demands, we can divide them into <code>Set language through Settings</code> and <code>Set language inside App</code></p>

<h3>Set language through Settings</h3>

<p>The user demand is easier than another one, when we change language by &ldquo;Settings &ndash;> General &ndash;> international&rdquo;, all applications will restart. So, the .strings file will be loaded again and the language is changed.</p>

<p>Now, let&rsquo;s see how to do it.</p>

<ul>
<li>Use the macro <code>NSLocalizedString(@"user_label_text", nil);</code> to wrap your strings.</li>
<li>Add one kind of language to project as follow, Xcode will generate a forder named <code>language-lproj</code>.
<a href="http://www.flickr.com/photos/tuchangwei/8664824887/" title="Flickr 上 涂 涂 的 412C868B-805A-405A-B5FB-B8F4FB0B96CC"><img src="http://static.flickr.com/8244/8664824887_29f530680e.jpg" width="500" height="284" alt="412C868B-805A-405A-B5FB-B8F4FB0B96CC"></a></li>
<li><p>Use the commend tool <code>genstrings</code> to generate Localizable.strings file.</p>

<pre><code>  genstrings *m -a -o  language-lproj
</code></pre></li>
<li><p>Change the value of the key for different language.</p>

<pre><code>  "user_label_text" = "用户登陆"
</code></pre></li>
</ul>


<p>The game seems over, but it is not true. The genstrings commend either replaces your earily changes, or just follows the changes, does not merge them. This is boring.</p>

<p>So what can i do? You know, we do not be defeated by Ants. Some advice as follows:</p>

<ol>
<li><a href="http://www.delitestudio.com/app/localizable-strings-merge/">Localizable Strings Merge </a> needs $4.99.</li>
<li><a href="AGi18n">AGi18n</a> free and can auto convert strings in xib.</li>
<li><p>my shells.</p>

<p> localizedstring.sh</p>

<pre><code> #!/bin/sh
 echo "input the language you want localize:"
 read language
 echo $language
 desFilePath=$PWD/"$language".lproj/Localizable.strings
 echo des file path is:"$desFilePath"
 if [ ! -e $desFilePath ] ; then
     echo "des file doed not exit, touch it."
     touch $desFilePath
 fi
 tmpDir=$PWD/"$language".lproj/tmp
 tmpFile="$tmpDir"/Localizable.strings
 tmpFile1="$tmpDir"/Localizable1.strings

 rm -rf $tmpDir
 mkdir $tmpDir
 touch $tmpFile1
 find . -name '*.m' | xargs genstrings -macRoman -a -o  $tmpDir
 find . -name '*.mm' | xargs genstrings -macRoman -a -o  $tmpDir
 iconv -f utf-16le  -t utf-8 $tmpFile &gt; $tmpFile1
 chmod 755 loop.sh
 echo  tempfile=$tmpFile1
 echo des=$desFilePath
 ./loop.sh $tmpFile1 $desFilePath
</code></pre>

<p> loop.sh</p>

<pre><code> #!/bin/sh  
 echo 1=$1
 echo 2=$2
 SRC=$1
 DES=$2
 if [ $# -ne 2 ] ; then
     echo Usage: loop.sh src des
     exit 1
 fi
 echo arg OK
 while read line; do
     #line is NULL
 #echo line=$line
     if [ "$line" == "" ] ; then
         echo $line &gt;&gt; $2
         continue
     fi  
     equal=`echo $line|grep "="`
     if [ "$equal" == "" ] ; then
         echo "$line" &gt;&gt; $2
         continue
     fi  
     left=`echo $line| cut -d "=" -f1`
     num=`cat $2|grep "$left"|wc -l`
 #echo num=$num
 #   sleep 1
     if [ $num -eq 0 ]; then
 #   echo "$line insert $2 !!!!!!!!!!!!"
         echo $line &gt;&gt; $2
     fi
 done &lt; $SRC
</code></pre></li>
<li><p><a href="https://github.com/questbeat/Lin">Lin</a> can reduce workload for you.</p>

<p> <img src="https://a248.e.akamai.net/camo.github.com/e089475332f6d71842cf1769d80aaccb14b5e809/687474703a2f2f61646f746f75742e73616b7572612e6e652e6a702f6769746875622f4c696e2f6c696e5f737330312e706e67" alt="" /></p>

<p> <img src="https://a248.e.akamai.net/camo.github.com/6c4fc4630543be9addbb384133d07074866d0a8a/687474703a2f2f61646f746f75742e73616b7572612e6e652e6a702f6769746875622f4c696e2f6c696e5f737330322e706e67" alt="" /></p>

<p> <img src="https://a248.e.akamai.net/camo.github.com/cd16d08d3838fbe83fc72922046ca2e1a03fe7a3/687474703a2f2f61646f746f75742e73616b7572612e6e652e6a702f6769746875622f4c696e2f6c696e5f737330332e706e67" alt="" /></p>

<p> <img src="https://a248.e.akamai.net/camo.github.com/ee79f2b06520190d207530b805dc4e656c396efa/687474703a2f2f61646f746f75742e73616b7572612e6e652e6a702f6769746875622f4c696e2f6c696e5f737330342e706e67" alt="" /></p></li>
</ol>


<h3>Set language inside App</h3>

<p>For this, we need an Object to load stings information real-time.</p>

<p>LanguageHelper.h</p>

<pre><code>#import &lt;Foundation/Foundation.h&gt;
#define CustomLocalizedString(str,comment) [LanguageHelper  get:str alter:nil]
@interface LanguageHelper : NSObject

+(void)initialize;
+(void)setLanguage:(NSString *)lan;
+(NSString *)get:(NSString *)key alter:(NSString *)alternate;

/* @brief 返回当前语言
 * @return 返回当前设置的语言
 */
+(NSString *)currentLanguage;
@end
</code></pre>

<p>LanguageHelper.m</p>

<pre><code>#import "LanguageHelper.h"

@implementation LanguageHelper

static NSBundle *bundle = nil;

+(void)initialize {


    NSUserDefaults* defs = [NSUserDefaults standardUserDefaults];
    NSString *current = @"";
    if ([defs valueForKey:@"userLanguage"])
    {
        current = [defs valueForKey:@"userLanguage"];
    }
    else
    {
        NSArray* languages = [defs objectForKey:@"AppleLanguages"];
        current =[languages objectAtIndex:0];


        NSArray *supportLanguage = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"SupportedLanguage"];
        if (![supportLanguage containsObject:current])
        {
            current = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"DefaultLanguage"];
        }
        [defs setValue:current forKey:@"userLanguage"];
        [defs synchronize];
    }

    [self setLanguage:current];

}
+(void)setLanguage:(NSString *)lan {
    NSLog(@"preferredLang: %@", lan);
    NSString *path = [[ NSBundle mainBundle ] pathForResource:lan ofType:@"lproj" ];
    bundle = [NSBundle bundleWithPath:path];
}

+(NSString *)get:(NSString *)key alter:(NSString *)alternate {
    return [bundle localizedStringForKey:key value:alternate table:nil];
}

+(NSString *)currentLanguage{
    NSUserDefaults* defs = [NSUserDefaults standardUserDefaults];

    return [defs objectForKey:@"userLanguage"];
}

@end
</code></pre>

<p>First, we need replace <code>NSLocalizable(string,commit)</code> to <code>CustomLocalizable(string,commit)</code>, then when the app initializes, we call the method <code>+(void)initialize</code>, when we  change another language, we call the method <code>+(void)setLanguage:(NSString *)lan</code>, then we reload the data on views, the function come true.</p>

<h3>Attention！！！</h3>

<p>Today, the earthquake attracked YaAn. They need our help, you can donate money through <a href="https://love.alipay.com/donate/itemDetail.htm?name=201304201216494301">壹基金</a>, God blesses YaAn and us.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoid retain cycle in block]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/04/10/avoid-retain-cycle-in-block/"/>
    <updated>2013-04-10T23:08:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/04/10/avoid-retain-cycle-in-block</id>
    <content type="html"><![CDATA[<p>Let us make long story short. Please see the codes as following:</p>

<pre><code>- (IBAction)didTapUploadButton:(id)sender
{
  NSString *clientID = @"YOUR_CLIENT_ID_HERE";

  NSString *title = [[self titleTextField] text];
  NSString *description = [[self descriptionTextField] text];

  [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:YES];

  __weak MLViewController *weakSelf = self;
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    UIImage *image = [UIImage imageNamed:@"balloons.jpg"];
    NSData *imageData = UIImageJPEGRepresentation(image, 1.0f);

[MLIMGURUploader uploadPhoto:imageData 
                       title:title 
                 description:description 
               imgurClientID:clientID completionBlock:^(NSString *result) {
  dispatch_async(dispatch_get_main_queue(), ^{
    [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:NO];
    [[weakSelf linkTextView] setText:result];
  });
} failureBlock:^(NSURLResponse *response, NSError *error, NSInteger status) {
  dispatch_async(dispatch_get_main_queue(), ^{
  [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:NO];
  [[[UIAlertView alloc] initWithTitle:@"Upload Failed"
                              message:[NSString stringWithFormat:@"%@ (Status code %d)", 
                                               [error localizedDescription], status]
                             delegate:nil
                    cancelButtonTitle:nil
                    otherButtonTitles:@"OK", nil] show];
  });
}];

  });
}
</code></pre>

<p>This is a method for uploading images to <a href="http://imgur.com/">imgur</a>. In the section we can find the codes <code>__weak MLViewController *weakSelf = self;</code> and use it like <code>[[weakSelf linkTextView] setText:result];</code>. So, we have a question: Why we don‘t call self directly,but rather give a weak pointer to point it and use the weak pointer in the block section?</p>

<p>It is what i will say. As we all know, the property of blocks is copy, and the property of self is retain. So, if we use self in the block section, we will get a retain circle. We will never release them. For this reason, we need do it as above.</p>

<p><a href="http://blog.random-ideas.net/?p=160">Here</a> is one reference</p>

<p>Ok, Good night. See you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to customize the UI of MPMoviePlayerViewController]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/04/06/how-to-customize-the-ui-of-mpmovieplayerviewcontroller/"/>
    <updated>2013-04-06T17:18:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/04/06/how-to-customize-the-ui-of-mpmovieplayerviewcontroller</id>
    <content type="html"><![CDATA[<p>As we all know, the user interface of MPMoviePlayerViewController is ugly. Sometimes, our customer needs a better UI, so let&rsquo;s do it.</p>

<p>Some codes like this:</p>

<pre><code>MPMoviePlayerViewController *player = [[MPMoviePlayerViewController alloc] init];
    player.moviePlayer.contentURL = self.url;
    //here, i set the controlStyle equal to MPMovieControlStyleNone, as a result, we only see the movie view, yet volume button, progress slider, play button as so on.
    player.moviePlayer.controlStyle = MPMovieControlStyleNone;
    player.moviePlayer.view.frame = self.playerViewController.view.frame;
    //next, i create a UIViewController named playerViewController, and insert the moverPlay view to the view of playerViewController.
    [self.playerViewController.view insertSubview:player.moviePlayer.view atIndex:0];
    [player.moviePlayer play];
    [self presentModalViewController:self.playerViewController animated:YES];
</code></pre>

<p>after do that, we need add a view to playerViewController, and set the view is transparent  , we can add custom button on the view to control the move playing. The effect as below:</p>

<p><a href="http://www.flickr.com/photos/tuchangwei/8624399482/" title="Flickr 上 涂 涂 的 Screenshot 2013.04.03 09.32.26"><img src="http://static.flickr.com/8111/8624399482_3801facaf7.jpg" width="500" height="375" alt="Screenshot 2013.04.03 09.32.26"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to learn to cattle men]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/04/06/how-to-learn-to-cattle-men/"/>
    <updated>2013-04-06T16:59:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/04/06/how-to-learn-to-cattle-men</id>
    <content type="html"><![CDATA[<p>修行之道：</p>

<p>关注大师的言行，</p>

<p>跟随大师的举动，</p>

<p>和大师一并修行，</p>

<p>领会大师的意境，</p>

<p>成为真正的大师。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some advice about Using ARC]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/03/31/some-advice-about-using-arc/"/>
    <updated>2013-03-31T21:46:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/03/31/some-advice-about-using-arc</id>
    <content type="html"><![CDATA[<ol>
<li>As long as there is a variable pointing to an object, that object stay in memory. When the pointer gets a new value or ceases to exist, the associated object is released.This is true for all variables:instance variables,synthesized properties, adn even local variables.</li>
<li>&ldquo;weak&rdquo; pointer. Variables that are weak can still point to objects but they do not become owners.</li>
<li>Please change the <code>Complier for C/C++/Object-c</code> option to <code>Apple LLVM compiler 3.0</code>.</li>
<li>Please set <code>Other Waring Flags</code> option to <code>-Wall</code>.</li>
<li>Please set <code>Run Static Analyzer</code> option to <code>Yes</code>.</li>
<li>Please set <code>Objective-c Automatic Reference Counting</code> option to <code>Yes</code>.</li>
<li>Some files needn&rsquo;t to convert to ARC support, use the <code>-fno-objc-arc</code> flag.</li>
<li><p>You will get this error when your code does the following:</p>

<pre><code> switch (X)
 {   
     case Y:
         NSString *s = ...;
         break;
 }
</code></pre>

<p> you need do this:</p>

<pre><code> switch (X)
 {   
    case Y:
    {
        NSString *s = ...;
        break;
    }
 }
</code></pre></li>
<li><p>If instace variables are a part of the internals of your class and not something you want expose in its public interface. you can move the instace variables from interface section to implementation section. some codes from .h file as following:</p>

<pre><code> #import &lt;UIKit/UIKit.h&gt;

 @interface MainViewController : UIViewController 
   &lt;UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate, 
   NSXMLParserDelegate&gt;

 @property (nonatomic, retain) IBOutlet UITableView *tableView;
 @property (nonatomic, retain) IBOutlet UISearchBar *searchBar;

 @end
</code></pre>

<p> move the instace variables to implementation section as following:</p>

<pre><code> @implementation MainViewController
 {
     NSOperationQueue *queue;
     NSMutableString *currentStringValue;
 }
</code></pre></li>
<li><p>Generally, dealloc method isn&rsquo;t need.The only reason for keeping a dealloc method around is when you need to free certain resources that do not fall under ARC’s umbrella. Examples of this are calling CFRelease() on Core Foundation objects, calling free() on memory that you allocated with malloc(), unregistering for notifications, invalidating a timer, and so on.</p></li>
<li>Toll-Free Bridging</li>
</ol>


<p> Change ownership from Core Foundation to Objecttive-C, use CFBridgingRelease().</p>

<p> Change ownership from Objective-C to Core Foundation, use CFBridgingRetain().</p>

<p> Want to use one type temporarily as if it were another without owership change, use __bridge.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Command line to pack applications]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/03/30/use-command-line-to-pack-applications/"/>
    <updated>2013-03-30T17:02:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/03/30/use-command-line-to-pack-applications</id>
    <content type="html"><![CDATA[<p>All right. It is time for me to write something. My wife has stayed in her hometown about half a month. I miss her very much. It is dark out of the window.  You know, in summer, the rain is rich in ShenZhen. Sometimes, I am very anxious about doing something which is matter with opportunity and ability. Anyway, let us do something about work.</p>

<p>Sometimes we need to build apps for many channels, we needn&rsquo;t change many codes but some configurations. As we all know, we use Xcode to build and run application. many channels many building. So boring! So let us see how to do it using command line.</p>

<ul>
<li><p>first shell, it is used for generating binary to upload AppStore.</p>

<pre><code>  #!/bin/sh
  target="Power7 MobileView"
  distDir="/Users/tuchangwei/Documents/WorkSpace/Release/${factory}/${appName}_V${version}"
  rm -rdf "$distDir"
  mkdir "$distDir"

  uploadDir="${distDir}/Upload AppStore"
  rm -rdf "$uploadDir"
  mkdir "$uploadDir"
  /usr/bin/xcodebuild -target "$target" clean
  echo "******************start build*********************"
  /usr/bin/xcodebuild -target "$target" CODE_SIGN_IDENTITY="$distribution"
  echo "******************start pick .ipa*********************"
  /usr/bin/xcrun -sdk iphoneos PackageApplication -v build/Release-iphoneos/*.app -o "${uploadDir}/${appName}.ipa" --sign "$distribution"
  echo "******************start pick test .ipa*********************"
  codesign -f --sign "iPhone Developer: Nelson Chen (JPMGJWJFAQ)" build/Release-iphoneos/*.app
  /usr/bin/xcrun -sdk iphoneos PackageApplication -v build/Release-iphoneos/*.app -o "${distDir}/${appName}_V${version}.ipa" --sign "iPhone Developer: Nelson Chen (JPMGJWJFAQ)" --embed "/Users/tuchangwei/Library/MobileDevice/Provisioning Profiles/D788EEA0-848E-4F5E-AA30-87D38154DA9B.mobileprovision"
</code></pre></li>
<li><p>second shell is used for generating test binary</p>

<pre><code>  #!/bin/sh
  target="Power7 MobileView"
  distDir="/Users/tuchangwei/Desktop/Test"
  rm -rdf "$distDir"
  mkdir "$distDir"
  /usr/bin/xcodebuild -target "$target" clean
  echo "******************start build*********************"
  /usr/bin/xcodebuild -target "$target" 
  echo "******************start pick test .ipa*********************"
  codesign -f --sign "iPhone Developer: Nelson Chen (JPMGJWJFAQ)" build/Release-iphoneos/*.app
  /usr/bin/xcrun -sdk iphoneos PackageApplication -v build/Release-iphoneos/*.app -o "${distDir}/test.ipa" --sign "iPhone Developer: Nelson Chen (JPMGJWJFAQ)" --embed "/Users/tuchangwei/Library/MobileDevice/Provisioning Profiles/D788EEA0-848E-4F5E-AA30-87D38154DA9B.mobileprovision"
</code></pre></li>
<li><p>third shell is used for deleting .svn files in project.</p>

<pre><code>  #!/bin/sh
  echo "start delete .svn..."
  find $PWD/ -name .svn -print0 | xargs -0 rm -rf
  echo "finish delete .svn."
</code></pre></li>
</ul>


<p>So, you know, i also use some shell to improve efficiency. See you,O(∩_∩)O~.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terminal Shortcuts]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/03/30/terminal-shortcuts/"/>
    <updated>2013-03-30T16:51:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/03/30/terminal-shortcuts</id>
    <content type="html"><![CDATA[<h3>mac/linux终端光标的快捷键操作</h3>

<h4>常用的快捷键：</h4>

<ul>
<li>Ctrl + d        删除一个字符，相当于通常的Delete键（命令行若无所有字符，则相当于exit；处理多行标准输入时也表示eof）</li>
<li>Ctrl + h        退格删除一个字符，相当于通常的Backspace键</li>
<li>Ctrl + u        删除光标之前到行首的字符</li>
<li>Ctrl + k        删除光标之前到行尾的字符</li>
<li>Ctrl + c        取消当前行输入的命令，相当于Ctrl + Break</li>
<li>Ctrl + a        光标移动到行首（Ahead of line），相当于通常的Home键</li>
<li>Ctrl + e        光标移动到行尾（End of line）</li>
<li>Ctrl + f        光标向前(Forward)移动一个字符位置</li>
<li>Ctrl + b        光标往回(Backward)移动一个字符位置</li>
<li>Ctrl + l        清屏，相当于执行clear命令</li>
<li>Ctrl + p        调出命令历史中的前一条（Previous）命令，相当于通常的上箭头</li>
<li>Ctrl + n        调出命令历史中的下一条（Next）命令，相当于通常的上箭头</li>
<li>Ctrl + r        显示：号提示，根据用户输入查找相关历史命令（reverse-i-search）</li>
</ul>


<h4>次常用快捷键：</h4>

<ul>
<li>Alt + f         光标向前（Forward）移动到下一个单词</li>
<li>Alt + b         光标往回（Backward）移动到前一个单词</li>
<li>Ctrl + w        删除从光标位置前到当前所处单词（Word）的开头</li>
<li>Alt + d         删除从光标位置到当前所处单词的末尾</li>
<li>Ctrl + y        粘贴最后一次被删除的单词</li>
</ul>


<p>以上就是快捷键了，在这里我只想揭露一些事情，这些快捷键都是emacs的快捷键！熟悉终端的同学应该知道，终端里可以设置快捷键的类型是vim还是emacs。当然了大多数的终端都用的emacs，因为啥自己想去吧。</p>

<p>在这里之所以又将这些东西提出来的原因是：mac os x虽然是图形界面，但是chrome，xcode啥的也支持这些快捷键！</p>

<p>摘自：<a href="http://blog.cnrainbird.com/index.php/2012/03/23/mac_linux_zhong_duan_guang_biao_de_kuai_jie_jian_cao_zuo/">http://blog.cnrainbird.com/index.php/2012/03/23/mac_linux_zhong_duan_guang_biao_de_kuai_jie_jian_cao_zuo/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How should we use NSLog]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/03/26/how-should-we-use-nslog/"/>
    <updated>2013-03-26T00:30:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/03/26/how-should-we-use-nslog</id>
    <content type="html"><![CDATA[<p>As we all know, every programming language has a selector to print the value on the Console which we want to. This way to debug is too violence, too simple and underestimated by someone. Other way is setting breakpoints, after application runs, it will stop when meets a breakpoint. Someone like this way, he need not see the Console and restart the application again and again to print.</p>

<p>But i want to say, unitl now, i really have been tend to print value. Because  when some mulitithreadings run at the same time, it is difficult to track the breakpoint. However other way is easy just as “History don&rsquo;t lie”. We can print the system time,the line of printing, the selector, the value of some object，the class as so on.</p>

<p>So,let us see the follow codes.</p>

<pre><code>#if DEBUG
#define NSLog(FORMAT, ...) {\
NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\
[dateFormatter setDateStyle:NSDateFormatterMediumStyle];\
[dateFormatter setTimeStyle:NSDateFormatterShortStyle];\
[dateFormatter setDateFormat:@"HH:mm:ss:SSSSSS"]; \
NSString *str = [dateFormatter stringFromDate:[NSDate date]];\
[dateFormatter release];\
fprintf(stderr,"[--%s--]*[--%s--]*[--%s:%d--]\n",[str UTF8String],  [[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String],[[[NSString  stringWithUTF8String:__FILE__] lastPathComponent] UTF8String], __LINE__);\
}
#else
#define NSLog(FORMAT, ...) nil
#endif 
</code></pre>

<p>This is a macro definition. You can copy this to your CommonHead.h file and import the  CommonHead.h to your .pch file so that you can use it at anywhere in your project. The macrodefinition is great, when you use debug mode to print value, you will find the value, the system time, the line and the object where the selector in, yet using the release mode, you will see nothing. The reason is as follow:</p>

<p><a href="http://www.flickr.com/photos/tuchangwei/8590218136/" title="Flickr 上 涂 涂 的 0F804C40-EA0B-42C5-8058-7E3230E01A13"><img src="http://static.flickr.com/8108/8590218136_2798079941.jpg" width="500" height="237" alt="0F804C40-EA0B-42C5-8058-7E3230E01A13"></a></p>

<p>Why we need print the line of the selector? Yes, you guess it, press &ldquo;cmd&rdquo; + &ldquo;i&rdquo; when using Xcode, you will find the selector right now!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Block to call back instead of Delegate]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/03/21/use-block-to-call-back-instead-of-delegate/"/>
    <updated>2013-03-21T22:25:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/03/21/use-block-to-call-back-instead-of-delegate</id>
    <content type="html"><![CDATA[<p>Some days ago, i posted the <a href="http://tuchangwei.github.com/blog/2013/03/19/dui-xiang-chuan-zhi-de-ji-chong-fang-shi-some-methods-to-make-talk-to-each-other-between-objects-a-and-b/">blog</a> to introduce some ways to talk to each oher between Object A and B. One of the points is Blocks. Now I will show how to call back use Block instead of Delegate.</p>

<p>Some codes posted as follow:</p>

<pre><code>A：SWDPromptViewController

.h
//declare a block named "dismissPromptViewBlock".
@property (copy, nonatomic) void(^dismissPromptViewBlock)   (SWDPromptViewController *prompt);

.m
//after some operations, we will dismiss A and release it.
-(void)dismissPrompt
{
    if (self.dismissPromptViewBlock)
    {
     self.dismissPromptViewBlock(self);
     self.dismissPromptViewBlock = nil;
    }
}


B：
.m
//declare A object and init it,then assign a block to the property of A.
//so when A executes the method "dismissPrompt", the block plays a part of
//Delegate.
SWDPromptViewController *promptViewController = [[SWDPromptViewController   alloc] initWithNibName:@"SWDPromptViewController" bundle:nil type:type];
UIWindow *promptWindow = [[UIWindow alloc] initWithFrame:[[UIScreen     mainScreen] bounds]];
promptWindow.windowLevel = UIWindowLevelAlert;
promptWindow.backgroundColor = [UIColor clearColor];
promptWindow.rootViewController = promptViewController;
[promptViewController release];
[promptWindow makeKeyAndVisible];

promptViewController.dismissPromptViewBlock = ^(SWDPromptViewController     *prompt){

    [promptWindow release];
    };
</code></pre>

<p>   That is all. Welcome to communicate with me.O(∩_∩)O~.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从Nib加载View(loading view from nib)]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/03/19/cong-nibjia-zai-view-loading-view-from-nib/"/>
    <updated>2013-03-19T22:15:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/03/19/cong-nibjia-zai-view-loading-view-from-nib</id>
    <content type="html"><![CDATA[<p>话说，有些View界面控件比较多，还是用nib拖拖拉拉方便。但是麻烦的一点是，我们要将nib与View对应的类进行连接，然后使用这个View的地方通过nib进行对象反序列化。我们一般用下面的语句进行反对象序列化。</p>

<pre><code>self.aboutView = [[[NSBundle mainBundle]loadNibNamed:@"AboutView" owner:self options:nil] objectAtIndex:0];
[self.view addSubview:self.aboutView];
</code></pre>

<p>每次都写如上的代码有些麻烦，其实我们可以为UIView创建一个category:</p>

<pre><code>@implementation UIView (MHExtensions)

+ (id)mh_viewFromNibNamed:(NSString *)nibName owner:(id)ownerOrNil
{
    NSArray *nib = [[NSBundle mainBundle] loadNibNamed:nibName owner:ownerOrNil options:nil];
    for (id object in nib)
    {
        if ([object isKindOfClass:[self class]])
            return object;
    }
    return nil;
}

@end
</code></pre>

<p>这样每次反序列化就只需要调用 <code>+ (id)mh_viewFromNibNamed:(NSString *)nibName owner:(id)ownerOrNil</code> 这个方法即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对象传值的几种方式(Some  methods to make talk to each other between objects A and B)]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/03/19/dui-xiang-chuan-zhi-de-ji-chong-fang-shi-some-methods-to-make-talk-to-each-other-between-objects-a-and-b/"/>
    <updated>2013-03-19T21:59:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/03/19/dui-xiang-chuan-zhi-de-ji-chong-fang-shi-some-methods-to-make-talk-to-each-other-between-objects-a-and-b</id>
    <content type="html"><![CDATA[<ol>
<li><strong>NSNotificationCenter</strong>. This is anonymous one-to-many communication. Object A posts a notification to the NSNotificationCenter, which then distributes it to any other objects listening for that notification, including Object B. A and B do not have to know anything about each other, so this is a very loose coupling. Maybe a little too loose…</li>
<li><strong>KVO (Key-Value Observing)</strong>. One object observes the properties of another. This is a very tight coupling, because Object B is now peeking directly into Object A. The advantage of KVO is that Object A doesn’t have to be aware of this at all, and therefore does not need to send out any notifications — the KVO mechanism takes care of this behind the scenes.</li>
<li><strong>Direct pointers</strong>. Object A has a pointer to Object B and directly sends it messages when something of interest happens. This is the tightest coupling possible because A and B cannot function without each other. In the case of view controllers you generally want to avoid this.</li>
<li><strong>Delegates</strong>. Object B is a delegate of Object A. In this scenario, Object A does not know anything about Object B. It just knows that some object performs the role of its delegate and it will happily send messages to that delegate, but it doesn’t know — or care — that this is Object B. The delegate pattern is often the preferred way to communicate between view controllers, but it takes some work to set up.</li>
<li><strong>Blocks</strong>. Essentially the same approach as delegates, except that Object B now gives Object A one or more blocks (closures) to be executed when certain events take place. There is no formal delegate protocol and the only thing that Object A sees of Object B is the blocks it is given.</li>
</ol>


<p>话说KVO检测对象的属性和Blocks相互传值还没使用过，回头试一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[管理iOS代码的一些规范]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/03/19/guan-li-iosdai-ma-de-yi-xie-gui-fan/"/>
    <updated>2013-03-19T20:08:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/03/19/guan-li-iosdai-ma-de-yi-xie-gui-fan</id>
    <content type="html"><![CDATA[<ol>
<li>做任何事前先<code>git init</code>。</li>
<li>使用<a href="http://cocoapods.org/">CocoaPods</a>管理第三方库。</li>
<li>使用ARC。如果第三方库没有使用ARC，可以在他们的.m文件中加上<code>-fno-objc-arc</code>关键字。</li>
<li>清除<code>@synthesize</code>。当你为成员变量增加<code>@property</code>时，Xcode会在编译时候默认为你增加<code>@synthesize</code>关键字。</li>
<li>移除注释掉的代码或工程中未使用的文件。</li>
<li>不要在AppDelete中写代码。</li>
<li>增加<code>#pragram mark –</code>在你需要注释的地方</li>
<li>管理好Xcode工程中的文件夹结构。一般使用<code>Model</code>,<code>View</code>,<code>Controller</code>,<code>Helper/Manager</code>和<code>Images</code>文件夹。如果有第三方库，则用<code>External</code>文件夹。</li>
<li>代码格式，空格。</li>
<li>将<code>__mycompany</code>改成有意义的。</li>
<li>时常NSLog，形成日志系统。</li>
</ol>


<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-神奇的分割线&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</p>

<p>又找到了一些规范：</p>

<p>Under the Warnings header, also set the Other Linker Flags option to -Wall. The compiler will now check for all possible situations that can cause problems. By default many of these warnings are turned off but I find it useful to always have all warnings on and to treat them as fatal errors. In other words, if the compiler gives a warning I will first fix it before continuing. Whether that is something you may want to do on your own projects is up to you, but during the conversion to ARC I recommend that you take a good look at any issues the compiler may complain about.
For the exact same reason, also enable the Run Static Analyzer option under the Build Options header, Xcode will now run the analyzer every time we build the app. That makes the builds a bit slower but for an app of this size that’s barely noticeable.</p>

<p>如果大家有什么好的代码规范，欢迎补充。O(∩_∩)O~。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blocks的申明调用与Queue当做锁的用法]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/03/10/blocksde-shen-ming-diao-yong-yu-queuedang-zuo-suo-de-yong-fa/"/>
    <updated>2013-03-10T11:40:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/03/10/blocksde-shen-ming-diao-yong-yu-queuedang-zuo-suo-de-yong-fa</id>
    <content type="html"><![CDATA[<h3>Blocks的申明与调用</h3>

<p>话说Blocks在方法内使用还是挺方便的，之前都是把相同的代码封装成外部函数，然后在一个方法里需要的时候调用，这样挺麻烦的。使用Blocks之后，我们可以把相同代码在这个方法里封装起来，然后再在这个方法中需要的地方直接调用，逻辑清晰，操作也不会那么繁琐。</p>

<p>上代码：</p>

<pre><code>//在方法体内
//block申明与初始化
 void(^removePicViewBlock)(int,int) = ^(int start,int stop){

    while (start &lt;= stop)
    {
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        SWDPictureView *view = (SWDPictureView *)[self.scroller viewWithTag:start + 1];
        view.imageView.image = nil;
        view.imageView = nil;
        view.delegate2 = nil;
        [view removeFromSuperview];
        start ++;
        [pool drain];
    }


};
if (page &lt; self.currentPage)
{
    //block的调用
    removePicViewBlock(0,page);
}
else if(page &gt; self.currentPage)
{
    //block的调用
    removePicViewBlock(page,[self.picList count]-1);
}
</code></pre>

<h3>Queue作为锁的用法</h3>

<p>说到多线程就必须要提到锁了，话说用锁也蛮麻烦，需要在初始化的时候申明一个锁，然后每个方法的开头加一把锁，结尾再把锁去掉。如果用queue就不必那么麻烦了。根据task在queue中FIFO的特性就可以防止多线程中资源被同时访问。</p>

<p>上代码。</p>

<pre><code>//初始化时初始化一个queue
UserQueue = dispatch_queue_create("use for storing image to disk", nil);

//多线程调用时，将任务放在queue中执行。此时queue充当锁的角色。
//存储图片缓冲到硬盘
-(void)storeImage:(UIImage *)image key:(NSString *)key
{
    dispatch_async(UserQueue, ^{

        NSFileManager *fileManager = [[NSFileManager alloc] init];
        BOOL succ = [fileManager createFileAtPath:[self cachePathForKey:key] contents:UIImageJPEGRepresentation(image, (CGFloat)0.6) attributes:nil];
        NSLog(@"store successfully!!! %d",succ);
        [fileManager release];
        fileManager = nil;
    });

}
</code></pre>

<p>好了，就这些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[说说翻墙软件 GoAgentX]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/03/10/shuo-shuo-fan-qiang-ruan-jian-goagentx/"/>
    <updated>2013-03-10T08:19:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/03/10/shuo-shuo-fan-qiang-ruan-jian-goagentx</id>
    <content type="html"><![CDATA[<p>翻墙软件对程序猿来说应该都是必备的吧，最近翻墙又出现了问题，所以又捣鼓了一遍。现在记下来，免得以后出问题又要翻半天。</p>

<ol>
<li><a href="https://appengine.google.com/">申请Google Appengine</a>。这是需要注意的是：申请时填写的app id不要包含移动平台的字段，比如iphone或者android。不然进入facebook，twitter网站会默认进入移动版。</li>
<li><a href="https://github.com/ohdarling/GoAgentX/downloads">下载GoAgentX</a>。最新的版本里已经包含了goagent，所以不再需要下载goagent。</li>
<li>安装GoAgentX并配置。这里要注意的是：服务配置选项卡里面的服务密码要填写。其他设置中的“导入goagent根证书”要点击导入。一个是为了防止出现url/2的错误，一个是为了防止无法登陆https网站。</li>
<li>chrome安装<a href="https://chrome.google.com/webstore/detail/proxy-switchysharp/dpplabbmogkhghncfbfdeeokoefdjegm">SwitchySharp插件</a>,并在插件中导入<a href="http://goagent.googlecode.com/files/SwitchyOptions.bak">http://goagent.googlecode.com/files/SwitchyOptions.bak</a></li>
</ol>


<p>那么，希望各位能在一个开放自由的互联网环境中学习，成长。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crashlytics 调试利器]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/03/09/crashlytics-diao-shi-li-qi/"/>
    <updated>2013-03-09T17:23:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/03/09/crashlytics-diao-shi-li-qi</id>
    <content type="html"><![CDATA[<p>今天收到Crashlytics员工发来的邮件，说他收到很多我发的重复请求，如果已收到邀请，请及时回复。话说他这个注册还挺麻烦，先发一个邮件地址过去，要等一天的样子，然后会收到一个邮件说你是否通过验证，通过验证才能注册。不知道要等那么久，以为是邮箱的关系，就不断的请求请求。哈。不管怎样，总算可以注册了。</p>

<p>说一下Crashlytics吧。</p>

<p>了解的不多，大概是将它的sdk加入到工程中可以随时监控iOS的崩溃情况，甚至可以定位到代码行级别。这个比iOS的崩溃日志强多了。</p>

<p>更多优点使用之后再和大家分享。</p>

<p><a href="http://www.flickr.com/photos/tuchangwei/8540600027/" title="Flickr 上 涂 涂 的 DEE758DA-B46C-477A-B790-13C9B14DE43F"><img src="http://static.flickr.com/8106/8540600027_a9a942a4ba.jpg" width="500" height="325" alt="DEE758DA-B46C-477A-B790-13C9B14DE43F"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCD和信号量]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/03/05/gcdhe-xin-hao-liang/"/>
    <updated>2013-03-05T21:50:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/03/05/gcdhe-xin-hao-liang</id>
    <content type="html"><![CDATA[<h1>GCD</h1>

<p>概念不多说，直接上代码。话说也不是什么高深的东东，不过极大简化了代码，一目了然。后面对信号量的记录也采用了相同的原理。</p>

<pre><code>//抛出线程
dispatch_async(dispatch_get_global_queue(0, 0), ^{

    NSURL * url = [NSURL URLWithString:@"http://www.google.com"];
    NSString * data = [NSString stringWithContentsOfURL:url encoding:NSUTF8StringEncoding error:nil];
    if (data != nil) {
        //抛出的线程执行完后，回到主线程处理界面逻辑。
        dispatch_async(dispatch_get_main_queue(), ^{

        });
    } else {

    }
});
</code></pre>

<h1>semaphore（信号量）</h1>

<p>信号量主要是用在传说中的生产者消费者模式里面，当信号量为0时线程挂起，当信号量大于0时继续向下执行。以前研究过一次，不过没怎么搞懂，反而把界面给搞死了。这次，取相册里的图片，GCD加Semaphore，又折腾了一次，还好。不多说，继续上代码。</p>

<pre><code>//这几段代码的大概意思是：抛一个线程出来，取相册里的group，再在取group中的线程中抛出线程，去取group中的result，最终到界面线程中去操作。
//这里需要两个信号量，一个用来阻塞取group的线程，避免界面线程先于取group的线程运行完毕。另外一个用来阻塞取result中的线程，避免取result的
//线程先于取group执行完毕。

//抛出线程
dispatch_async(dispatch_get_global_queue(0, 0), ^{

    //创建信号量
    dispatch_semaphore_t semaphore1 = dispatch_semaphore_create(0);
    dispatch_semaphore_t semaphore2 = dispatch_semaphore_create(0);
    ALAssetsGroupEnumerationResultsBlock groupEnumerAtion = ^(ALAsset *result, NSUInteger index, BOOL *stop){

        if (result == nil) {
            //当某个group取完毕后，信号量加1，dispatch_semaphore_wait方法执行，信号量为0，程序循环，去取下一个group中的result
            dispatch_semaphore_signal(semaphore2);

        }else if ([[result valueForProperty:ALAssetPropertyType]isEqualToString:ALAssetTypePhoto]||[[result valueForProperty:ALAssetPropertyType]
 isEqualToString:ALAssetTypeVideo]) {

            FileNode *node = [[FileNode alloc] init];
            node.m_name =  result.defaultRepresentation.filename;
            node.m_path = [result.defaultRepresentation.url absoluteString];
            [self.picList addObject:node];
            NSLog(@"%@",node.m_name);
            NSLog(@"%@",node.m_path);
            [node release];

        }
    };


    ALAssetsLibraryGroupsEnumerationResultsBlock libraryGroupsEnumeration = ^(ALAssetsGroup* group, BOOL* stop){

        if (group!=nil)
        {

            [group enumerateAssetsUsingBlock:groupEnumerAtion];
            dispatch_semaphore_wait(semaphore2, DISPATCH_TIME_FOREVER);

        }else{
            //当所有group取完后，信号量加1，程序不再阻塞，进入界面线程。
            dispatch_semaphore_signal(semaphore1);
        }

    };

    ALAssetsLibraryAccessFailureBlock failureblock = ^(NSError *error){


        NSLog(@"failureblock:%@",error);
    };


    ALAssetsLibrary* library = [[ALAssetsLibrary alloc] init];
    [library enumerateGroupsWithTypes:ALAssetsGroupAll
                           usingBlock:libraryGroupsEnumeration
                         failureBlock:failureblock];

    dispatch_semaphore_wait(semaphore1, DISPATCH_TIME_FOREVER);
    dispatch_release(semaphore1);
    dispatch_release(semaphore2);
    dispatch_async(dispatch_get_main_queue(), ^{

        [self loadPicAtPage:self.currentPage];
        [self loadPicAtPage:self.currentPage + 1];
    });
});
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git 简易指南]]></title>
    <link href="http://tuchangwei.github.io/blog/2013/03/03/git-jian-yi-zhi-nan/"/>
    <updated>2013-03-03T14:51:00+08:00</updated>
    <id>http://tuchangwei.github.io/blog/2013/03/03/git-jian-yi-zhi-nan</id>
    <content type="html"><![CDATA[<p>以前看git文档，看的云里雾里的，没怎么看懂，后来在公司用了svn，对版本控制了解更深了些。最近看到了这篇《Git简易指南》彻底明白git是怎么回事了。以防此好文丢失，现转载如下：</p>

<h1>创建新仓库</h1>

<p>创建新文件夹，打开，然后执行</p>

<pre><code>git init
</code></pre>

<p>以创建新的 git 仓库。</p>

<h1>检出仓库</h1>

<p>执行如下命令以创建一个本地仓库的克隆版本：</p>

<pre><code>git clone /path/to/repository
</code></pre>

<p>如果是远端服务器上的仓库，你的命令会是这个样子：</p>

<pre><code>git clone username@host:/path/to/repository
</code></pre>

<h1>工作流</h1>

<p>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的 <code>工作目录</code>，它持有实际文件；第二个是 <code>缓存区（Index）</code>，它像个缓存区域，临时保存你的改动；最后是 <code>HEAD</code>，指向你最近一次提交后的结果。</p>

<p><a href="http://www.flickr.com/photos/tuchangwei/8523967294/" title="Flickr 上 涂 涂 的 git-trees"><img src="http://static.flickr.com/8088/8523967294_eed70782b4.jpg" width="500" height="178" alt="git-trees"></a></p>

<h1>添加与提交</h1>

<p>你可以计划改动（把它们添加到缓存区），使用如下命令：</p>

<pre><code>git add &lt;filename&gt;
git add *
</code></pre>

<p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：</p>

<pre><code>git commit -m "代码提交信息"
</code></pre>

<p>现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。</p>

<h1>推送改动</h1>

<p>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：</p>

<pre><code>git push origin master
</code></pre>

<p>可以把 master 换成你想要推送的任何分支。
如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p>

<pre><code>git remote add origin &lt;server&gt;
</code></pre>

<p>如此你就能够将你的改动推送到所添加的服务器上去了。</p>

<h1>分支</h1>

<p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。</p>

<p><a href="http://www.flickr.com/photos/tuchangwei/8523448559/" title="Flickr 上 涂 涂 的 branches"><img src="http://static.flickr.com/8112/8523448559_b6123efc03.jpg" width="500" height="178" alt="branches"></a></p>

<p>创建一个叫做“feature_x”的分支，并切换过去：</p>

<pre><code>git checkout -b feature_x
</code></pre>

<p>切换回主分支：</p>

<pre><code>git checkout master
</code></pre>

<p>再把新建的分支删掉：</p>

<pre><code>git branch -d feature_x
</code></pre>

<p>除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：</p>

<pre><code>git push origin &lt;branch&gt;
</code></pre>

<h1>更新与合并</h1>

<p>要更新你的本地仓库至最新改动，执行：</p>

<pre><code>git pull
</code></pre>

<p>以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。
要合并其他分支到你的当前分支（例如 master），执行：</p>

<pre><code>git merge &lt;branch&gt;
</code></pre>

<p>两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 冲突（conflicts）。 这时候就需要你修改这些文件来人肉合并这些 冲突（conflicts） 了。改完之后，你需要执行如下命令以将它们标记为合并成功：</p>

<pre><code>git add &lt;filename&gt;
</code></pre>

<p>在合并改动之前，也可以使用如下命令查看：</p>

<pre><code>git diff &lt;source_branch&gt; &lt;target_branch&gt;
</code></pre>

<h1>标签</h1>

<p>在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 1.0.0 的标签：</p>

<pre><code>git tag 1.0.0 1b2e1d63ff
</code></pre>

<p>1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：</p>

<pre><code>git log
</code></pre>

<p>你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。</p>

<h1>替换本地改动</h1>

<p>假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：</p>

<pre><code>git checkout -- &lt;filename&gt;
</code></pre>

<p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。</p>

<p>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：</p>

<pre><code>git fetch origin
git reset --hard origin/master
</code></pre>

<h1>有用的贴士</h1>

<p>内建的图形化 git：gitk</p>

<p>彩色的 git 输出：</p>

<pre><code>git config color.ui true
</code></pre>

<p>显示历史记录时，只显示一行注释信息：</p>

<pre><code>git config format.pretty oneline
</code></pre>

<p>交互地添加文件至缓存区：</p>

<pre><code>git add -i
</code></pre>

<hr />

<h1>有用的图片</h1>

<p><a href="http://www.flickr.com/photos/tuchangwei/9559884789/" title="Flickr 上 涂 涂 的 1352126739_7909"><img src="http://static.flickr.com/7301/9559884789_bee6b04c14.jpg" width="500" height="261" alt="1352126739_7909"></a></p>

<p>转自：<a href="http://rogerdudler.github.com/git-guide/index.zh.html">http://rogerdudler.github.com/git-guide/index.zh.html</a></p>

<p>  <!--more--></p>
]]></content>
  </entry>
  
</feed>
